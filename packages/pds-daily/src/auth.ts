import type { App } from 'vue'
// Generated by https://quicktype.io

export interface SwitTokenResponse {
  access_token: string
  expires_in: number
  refresh_token: string
  scope: string
  token_type: string
}

export class AuthStore {
  static TokenType = { Refresh: 'pdsd_s_rt', Access: 'pdsd_s_at' }
  store = localStorage

  static create() {
    return new AuthStore()
  }
  setToken(type: string, token: string) {
    this.store.setItem(type, token)
  }
  getToken(type = AuthStore.TokenType.Access) {
    return this.store.getItem(type)
  }
}

export class Auth {
  store: AuthStore
  static instance: Auth | undefined

  static Plugin = {
    install(app: App) {
      if (Auth.instance && app.config.globalProperties.$auth) return
      Auth.instance = new Auth()
      app.config.globalProperties.$auth = Auth.instance
      app.provide('$auth', Auth.instance)
    },
  }
  constructor(authStore = AuthStore) {
    this.store = authStore.create()
  }

  handleTokenResponse(response: SwitTokenResponse) {
    this.setAccessToken(response.access_token)
    this.setRefreshToken(response.refresh_token)
  }
  setAccessToken(token: string) {
    this.store.setToken(AuthStore.TokenType.Access, token)
  }
  setRefreshToken(token: string) {
    this.store.setToken(AuthStore.TokenType.Refresh, token)
  }
  getAccessToken() {
    return this.store.getToken()
  }
  getRefreshToken() {
    return this.store.getToken(AuthStore.TokenType.Refresh)
  }
}

export default Auth
